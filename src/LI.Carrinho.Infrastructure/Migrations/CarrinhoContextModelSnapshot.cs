// <auto-generated />
using System;
using LI.Carrinho.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LI.Carrinho.Infrastructure.Migrations
{
    [DbContext(typeof(CarrinhoContext))]
    partial class CarrinhoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.CarrinhoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("VlTotal")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente")
                        .IsUnique();

                    b.ToTable("TB_CARRINHO");
                });

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TB_CLIENTE");
                });

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.ItemCarrinho", b =>
                {
                    b.Property<Guid>("IdProduto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCarrinho")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdProduto", "IdCarrinho");

                    b.HasIndex("IdCarrinho");

                    b.ToTable("TB_ITEM_CARRINHO");
                });

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Peso")
                        .HasColumnType("int");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("TB_PRODUTOS");
                });

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.CarrinhoEntity", b =>
                {
                    b.HasOne("LI.Carrinho.Domain.Entities.Cliente", "Cliente")
                        .WithOne("Carrinho")
                        .HasForeignKey("LI.Carrinho.Domain.Entities.CarrinhoEntity", "IdCliente")
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.ItemCarrinho", b =>
                {
                    b.HasOne("LI.Carrinho.Domain.Entities.CarrinhoEntity", "Carrinho")
                        .WithMany("ItemCarrinhos")
                        .HasForeignKey("IdCarrinho")
                        .IsRequired();

                    b.HasOne("LI.Carrinho.Domain.Entities.Produto", "Produto")
                        .WithMany("ItemCarrinhos")
                        .HasForeignKey("IdProduto")
                        .IsRequired();

                    b.Navigation("Carrinho");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.CarrinhoEntity", b =>
                {
                    b.Navigation("ItemCarrinhos");
                });

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Carrinho");
                });

            modelBuilder.Entity("LI.Carrinho.Domain.Entities.Produto", b =>
                {
                    b.Navigation("ItemCarrinhos");
                });
#pragma warning restore 612, 618
        }
    }
}
